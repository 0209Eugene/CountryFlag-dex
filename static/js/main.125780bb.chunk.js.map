{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","country","alpha3Code","toString","toLowerCase","name","capital","CardList","countries","map","key","SearchBox","labelTitle","placeholder","handleChange","type","onChange","App","convertTextToLowerCase","lowercasetext","state","defaultText","setState","searchField","fetch","then","response","json","names","this","filterdCountries","filter","includes","e","target","value","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mVAGaA,G,YAAO,SAAAC,GAAK,OACvB,yBAAKC,UAAU,kBACb,yBAAKA,UAAU,qBACbC,IAAI,UACJC,IAAG,wCAAmCH,EAAMI,QAAQC,WAAWC,WAAWC,cAAvE,UACL,gCAAMP,EAAMI,QAAQI,KAApB,KACA,yCAAeR,EAAMI,QAAQK,QAA7B,QCLSC,G,MAAW,SAAAV,GAAK,OAC3B,yBAAKC,UAAU,aACZD,EAAMW,UAAUC,KAAI,SAAAR,GAAO,OAC1B,kBAAC,EAAD,CAAMS,IAAKT,EAAQC,WAAYD,QAASA,UCJjCU,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,WAAYC,EAAf,EAAeA,YAAaC,EAA5B,EAA4BA,aAA5B,OACvB,mCAASF,EACP,2BACId,UAAY,SACZiB,KAAK,SACLF,YAAcA,EACdG,SAAYF,OCmCLG,E,YAtCd,aAAe,IAAD,8BACb,+CAODC,uBAAyB,WACtB,IACIC,EADO,EAAKC,MAAMC,YACGjB,cACzB,EAAKkB,SAAS,CAAED,YAAaF,KAT/B,EAAKC,MAAQ,CACZZ,UAAW,GACXe,YAAa,IAJD,E,iFAcO,IAAD,OACnBC,MAAM,wCACJC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKN,SAAS,CAAEd,UAAWoB,S,+BAGlC,IAAD,SAC2BC,KAAKT,MAAhCZ,EADA,EACAA,UAAWe,EADX,EACWA,YACbO,EAAmBtB,EAAUuB,QAAO,SAAA9B,GAAO,OAChDA,EAAQI,KAAKD,cAAc4B,SAAST,EAAYnB,kBAGjD,OACC,yBAAKN,UAAU,OACd,gDACA,kBAAC,EAAD,CACCc,WAAa,cACbC,YAAa,uBACbC,aAAgB,SAAAmB,GAAC,OAAI,EAAKX,SAAS,CAAEC,YAAaU,EAAEC,OAAOC,WAC5D,kBAAC,EAAD,CAAU3B,UAAasB,S,GAlCTM,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxB,MAAK,SAAAyB,GACjCA,EAAaC,kB","file":"static/js/main.125780bb.chunk.js","sourcesContent":["import React from 'react';\nimport './card.styles.css';\n\nexport const Card = props => (\n  <div className=\"card-container\">\n    <img className=\"country-flag-image\"\n      alt='country'\n      src={`https://restcountries.eu/data/${props.country.alpha3Code.toString().toLowerCase()}.svg`} />\n    <h2> {props.country.name} </h2>\n    <h3> Capital: {props.country.capital} </h3>\n  </div>\n);","import React from 'react';\nimport { Card } from '../card/card.component';\nimport './card-list.styles.css';\n\nexport const CardList = props => (\n  <div className=\"card-list\">\n    {props.countries.map(country => (\n      <Card key={country.alpha3Code} country={country} />\n    ))}\n  </div>\n);","import React from 'react';\nimport './search-box.styles.css';\n\nexport const SearchBox = ({ labelTitle, placeholder, handleChange }) => (\n  <label> {labelTitle}\n    <input\n        className = 'search'\n        type='search' \n        placeholder= {placeholder}\n        onChange = {handleChange}\n      />\n    </label>\n)","import React from 'react';\nimport './App.css';\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\n\nclass App extends React.Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tcountries: [],\n\t\t\tsearchField: ''\n\t\t};\n\t}\n\n\tconvertTextToLowerCase = () => {\n    var text = this.state.defaultText;\n    var lowercasetext = text.toLowerCase();//To convert Lower Case\n    this.setState({ defaultText: lowercasetext });\n  };\n\n\tcomponentDidMount() {\n\t\tfetch('https://restcountries.eu/rest/v2/all')\n\t\t\t.then(response => response.json())\n\t\t\t.then(names => this.setState({ countries: names }));\n}\n\n\trender() {\n\t\tconst { countries, searchField } = this.state;\n\t\tconst filterdCountries = countries.filter(country =>\n\t\t\tcountry.name.toLowerCase().includes(searchField.toLowerCase())\n\t\t);\n\n\t\treturn (\n\t\t\t<div className='App'>\n\t\t\t\t<h1>Country Flag-dex</h1>\n\t\t\t\t<SearchBox\n\t\t\t\t\tlabelTitle = 'Search Name'\n\t\t\t\t\tplaceholder ='search country names'\n\t\t\t\t\thandleChange = {e => this.setState({ searchField: e.target.value })}/>\n\t\t\t\t<CardList countries = {filterdCountries} />\n      </div>\n\t\t);\n\t}\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}